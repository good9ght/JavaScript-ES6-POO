{"version":3,"sources":["../../app-es6/models/Negociacao.js"],"names":["Negociacao","constructor","data","quantidade","valor","_data","Date","getTime","_quantidade","_valor","Object","freeze","volume","isEquals","negociacao","JSON","stringify"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;;AAEbC,gBAAYC,IAAZ,EAAkBC,UAAlB,EAA8BC,KAA9B,EAAqC;;AAEjC;;;;;;;;;;;;AAYA,aAAKC,KAAL,GAAa,IAAIC,IAAJ,CAASJ,KAAKK,OAAL,EAAT,CAAb;;AAEA,aAAKC,WAAL,GAAmBL,UAAnB;AACA,aAAKM,MAAL,GAAcL,KAAd;;AAEA;;;;;;;;;;;AAWAM,eAAOC,MAAP,CAAc,IAAd;AACH;;AAED;;;;;;;;;AASA,QAAIC,MAAJ,GAAa;AACT,eAAO,KAAKJ,WAAL,GAAmB,KAAKC,MAA/B;AACH;;AAED;;;;;;;;;;;AAWA,QAAIP,IAAJ,GAAW;AACP,eAAO,IAAII,IAAJ,CAAS,KAAKD,KAAL,CAAWE,OAAX,EAAT,CAAP;AACH;;AAED,QAAIJ,UAAJ,GAAiB;AACb,eAAO,KAAKK,WAAZ;AACH;;AAED,QAAIJ,KAAJ,GAAY;AACR,eAAO,KAAKK,MAAZ;AACH;;AAEDI,aAASC,UAAT,EAAqB;AACjB;;;;;;;;;;;;;AAaA,eAAOC,KAAKC,SAAL,CAAe,IAAf,KAAwBD,KAAKC,SAAL,CAAeF,UAAf,CAA/B;AACH;AAtFY","file":"Negociacao.js","sourcesContent":["class Negociacao {\n\n    constructor(data, quantidade, valor) {\n\n        /*\n        |----------------------------------------------------------------------\n        | Programação Defensiva\n        |----------------------------------------------------------------------\n        |\n        | Objetos dentro da classe congelada que possuem funções de alteração\n        | como o seDate()\n        | podem ser alterados através delas.\n        | O new Date está 'clonando' o objeto data,\n        | impedindo que ela seja alterada fora da classe.\n        |\n        */\n        this._data = new Date(data.getTime());\n\n        this._quantidade = quantidade;\n        this._valor = valor;\n\n        /*\n        |----------------------------------------------------------------------\n        | Object.freeze(objeto)\n        |----------------------------------------------------------------------\n        |\n        | Como o nome diz, ele 'congela' o objeto,\n        | impedindo que o mesmo seja alterado.\n        | No entanto, ele é shallow(raso), ele não congela propriedades em\n        | camadas mais profundas, como em objetos.\n        |\n        */\n        Object.freeze(this);\n    }\n\n    /*\n    |--------------------------------------------------------------------------\n    | Métodos e Funções\n    |--------------------------------------------------------------------------\n    |\n    | Uma função fora de uma classe é uma função,\n    | uma função dentro de uma classe é um método!\n    |\n    */\n    get volume() {\n        return this._quantidade * this._valor;\n    }\n\n    /*\n    |--------------------------------------------------------------------------\n    | private\n    |--------------------------------------------------------------------------\n    |\n    | Até o momento o javascript não suporta variáveis private.\n    | Por conta disso, será utilizada a convenção '_variavel' para \"avisar\"\n    | que a mesma é privada.\n    |\n    */\n\n    get data() {\n        return new Date(this._data.getTime());\n    }\n\n    get quantidade() {\n        return this._quantidade;\n    }\n\n    get valor() {\n        return this._valor;\n    }\n\n    isEquals(negociacao) {\n        /*\n        |--------------------------------------------------------------\n        | Comparando Objetos\n        |--------------------------------------------------------------\n        |\n        | Variaveis apontam para valores na memoria,\n        | toda variavel em js é uma especie de objeto,\n        | Na comaparação de variáveis te tipos literáis(primitivos) é comparado o seu valor.\n        | No entanto, Na comparação de objetos é comparado o local na memória para onde a variável aponta.\n        | Para comparar dois objetos é necessário converte-lo para texto.\n        | Serialize\n        |\n        */\n        return JSON.stringify(this) == JSON.stringify(negociacao);\n    }\n}\n"]}
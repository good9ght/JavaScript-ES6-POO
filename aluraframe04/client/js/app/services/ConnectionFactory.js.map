{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","dbName","stores","version","connection","close","constructor","Error","getConnection","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","event","_createConnection","target","result","onsuccess","bind","onerror","console","log","e","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";AACA;;;;;;;;;;AAUA,IAAIA,oBAAqB,YAAW;;AAEhC;;;;;;;;;;AAUA,UAAMC,SAAS,YAAf;AACA,UAAMC,SAAS,CAAC,aAAD,CAAf;AACA,UAAMC,UAAU,CAAhB;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA,WAAO,MAAML,iBAAN,CAAwB;;AAE3BM,sBAAc;AACV,kBAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;AAED,eAAOC,aAAP,GAAuB;AACnB,mBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBd,MAAtB,EAA8BE,OAA9B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA+BC,KAAD,IAAW;AACrC,yBAAKC,iBAAL,CAAuBD,MAAME,MAAN,CAAaC,MAApC;AACH,iBAFD;;AAIAR,4BAAYS,SAAZ,GAAyBJ,KAAD,IAAW;AAC/B,wBAAG,CAACb,UAAJ,EAAgB;AACZA,qCAAaa,MAAME,MAAN,CAAaC,MAA1B;AACA;;;;;;;;AAQAf,gCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACH;AACDA,+BAAWC,KAAX,GAAmB,MAAM;AACrB,8BAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qBAFD;AAGAG,4BAAQN,UAAR;AACH,iBAjBD;;AAmBAQ,4BAAYW,OAAZ,GAAuBN,KAAD,IAAW;AAC7BO,4BAAQC,GAAR,CAAYC,EAAEP,MAAF,CAASQ,KAArB;AACAhB,2BAAOe,EAAEP,MAAF,CAASQ,KAAT,CAAeC,IAAtB;AACH,iBAHD;AAIH,aA/BM,CAAP;AAgCH;;AAED,eAAOV,iBAAP,CAAyBd,UAAzB,EAAqC;AACjCF,mBAAO2B,OAAP,CAAgBC,KAAD,IAAW;AACtB,oBAAG1B,WAAW2B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EAAgD1B,WAAW6B,iBAAX,CAA6BH,KAA7B;AAChD1B,2BAAW8B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,aAHD;AAIH;;AAED,eAAOC,eAAP,CAAuBhC,UAAvB,EAAmC;AAC/BC;AACAD,yBAAa,IAAb;AACH;AAnD0B,KAA/B;AAqDH,CAxEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["\n/*\n|----------------------------------------------------------------------\n| IIFE Immediately-invoked function expression\n|----------------------------------------------------------------------\n|\n| Utilizando o IIFE é possível encasular o escopo e as variáveis declaradas com\n| var não poderão ser chamadas fora deste.\n| A ConnectionFactory torná-se uma espécie de modulo.\n|\n*/\nvar ConnectionFactory = (function() {\n\n    /*\n    |----------------------------------------------------------------------\n    | const\n    |----------------------------------------------------------------------\n    |\n    | Objetos podem ter seus atributos alterados mesmo sendo const.\n    | const não garante imutabilidade, apenas que um novo valor não seja atribuido.\n    |\n    */\n\n    const dbName = 'aluraframe';\n    const stores = ['negociacoes'];\n    const version = 2;\n\n    var connection = null;\n    var close = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Error(\"Está classe não pode ser instânciada.\");\n        }\n\n        static getConnection() {\n            return new Promise((resolve, reject) => {\n\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = (event) => {\n                    this._createConnection(event.target.result);\n                }\n\n                openRequest.onsuccess = (event) => {\n                    if(!connection) {\n                        connection = event.target.result;\n                        /*\n                        |----------------------------------------------------------------------\n                        | Monkey Patch\n                        |----------------------------------------------------------------------\n                        |\n                        | Sobrepondo a função close do objeto connection.\n                        |\n                        */\n                        close = connection.close.bind(connection);\n                    }\n                    connection.close = () => {\n                        throw new Error(\"Você não pode fechar diretamente a conexão.\");\n                    }\n                    resolve(connection);\n                }\n\n                openRequest.onerror = (event) => {\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                }\n            });\n        }\n\n        static _createConnection(connection) {\n            stores.forEach((store) => {\n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n                connection.createObjectStore(store, { autoIncrement: true });\n            });\n        }\n\n        static closeConnection(connection) {\n            close();\n            connection = null;\n        }\n    }\n})();\n"]}
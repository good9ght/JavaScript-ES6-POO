{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","constructor","_http","HttpService","buscarNegociacoesSemana","Promise","resolve","reject","get","then","objeto","catch","erro","console","log","buscarNegociacoesSemanaAnterior","buscarNegociacoesSemanaRetrasada","obterNegociacoes","all","periodos","negociacoes","reduce","arrayFlatten","periodo","concat","map","negociacao","Negociacao","Date","data","quantidade","valor","Error","cadastra","ConnectionFactory","getConnection","conexao","NegociacaoDao","dao","adicionar","apagarTodas","apagarTodos","listar","listarTodos","importar","listaAtual","filter","some","negociacaoExistente","isEquals"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    buscarNegociacoesSemana() {\n        return new Promise((resolve, reject) => {\n            this._http.get(\"negociacoes/semana\").then(objeto => resolve(objeto))\n            .catch(erro => {\n                console.log(erro);\n                reject(\"Erro ao importar negociações da semana.\");\n            });\n        });\n    }\n\n    buscarNegociacoesSemanaAnterior() {\n        return new Promise((resolve, reject) => {\n            this._http.get(\"negociacoes/anterior\").then(objeto => resolve(objeto))\n            .catch(erro => {\n                reject(\"Erro ao importar negociações da semana anterior.\");\n            });\n        });\n    }\n\n    buscarNegociacoesSemanaRetrasada() {\n        return new Promise((resolve, reject) => {\n            this._http.get(\"negociacoes/retrasada\").then(objeto => resolve(objeto))\n            .catch(erro => {\n                console.log(erro);\n                reject(\"Erro ao importar negociações da semana retrasada.\");\n            });\n        });\n    }\n\n    obterNegociacoes() {\n        /*\n        |----------------------------------------------------------------------\n        | Promise.all()\n        |----------------------------------------------------------------------\n        |\n        | Recebe um array de promises, o seu método then() retorna um array de\n        | respostas. O seu catch irá retornar o primeor erro que ocorrer.\n        | Promises podem são utilizadas para evitar a 'pyramid of doom',\n        | onde é formada uma piramide de callbacks que dependem um do outro.\n        |\n        */\n        return Promise.all([\n            this.buscarNegociacoesSemana(),\n            this.buscarNegociacoesSemanaAnterior(),\n            this.buscarNegociacoesSemanaRetrasada()\n        ])\n        .then(periodos => {\n            let negociacoes = periodos.reduce((arrayFlatten, periodo) => arrayFlatten.concat(periodo), [])\n            .map(negociacao =>\n                new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor));\n\n            return negociacoes;\n        })\n        .catch(erro => {\n            throw new Error(erro);\n        });\n    }\n\n    cadastra(negociacao) {\n        return ConnectionFactory.getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.adicionar(negociacao))\n            .catch(erro => {\n                throw new Error(erro);\n            });\n    }\n\n    apagarTodas() {\n        return ConnectionFactory.getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.apagarTodos())\n            .catch(erro => {\n                throw new Error(erro);\n            });\n    }\n\n    listar() {\n        return ConnectionFactory.getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.listarTodos())\n            .catch(erro => {\n                throw new Error(erro);\n            });\n    }\n\n    importar(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                /*\n                |--------------------------------------------------------------\n                | array.filter((item) => { return true or false})\n                |--------------------------------------------------------------\n                |\n                | filter() percorre o array verificando se o item deve ou não fazer\n                | parte do novo array que será retornado no final da verificação.\n                |\n                */\n                negociacoes.filter(negociacao =>\n                    /*\n                    |----------------------------------------------------------\n                    | array.some((item) => {})\n                    |----------------------------------------------------------\n                    |\n                    | Permite realizar uma verificação com cada item do array\n                    | se o resultado for true a verificação para e true é retornado,\n                    | caso contrário false.\n                    |\n                    */\n                    !listaAtual.some(negociacaoExistente =>\n                        negociacaoExistente.isEquals(negociacao))))\n            .catch(erro => {\n                throw new Error(erro);\n            })\n    }\n\n}\n"]}
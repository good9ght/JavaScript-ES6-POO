{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","Negociacao","ConnectionFactory","NegociacaoDao","NegociacaoService","_http","Promise","resolve","reject","get","then","objeto","catch","console","log","erro","all","buscarNegociacoesSemana","buscarNegociacoesSemanaAnterior","buscarNegociacoesSemanaRetrasada","negociacoes","periodos","reduce","arrayFlatten","periodo","concat","map","Date","negociacao","data","quantidade","valor","Error","getConnection","conexao","dao","adicionar","apagarTodos","listarTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","isEquals"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService';\nimport { Negociacao } from '../models/Negociacao';\nimport { ConnectionFactory } from './ConnectionFactory';\nimport { NegociacaoDao } from '../dao/NegociacaoDao';\n\n\nexport class NegociacaoService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    buscarNegociacoesSemana() {\n        return new Promise((resolve, reject) => {\n            this._http.get(\"negociacoes/semana\").then(objeto => resolve(objeto))\n            .catch(erro => {\n                console.log(erro);\n                reject(\"Erro ao importar negociações da semana.\");\n            });\n        });\n    }\n\n    buscarNegociacoesSemanaAnterior() {\n        return new Promise((resolve, reject) => {\n            this._http.get(\"negociacoes/anterior\").then(objeto => resolve(objeto))\n            .catch(erro => {\n                reject(\"Erro ao importar negociações da semana anterior.\");\n            });\n        });\n    }\n\n    buscarNegociacoesSemanaRetrasada() {\n        return new Promise((resolve, reject) => {\n            this._http.get(\"negociacoes/retrasada\").then(objeto => resolve(objeto))\n            .catch(erro => {\n                console.log(erro);\n                reject(\"Erro ao importar negociações da semana retrasada.\");\n            });\n        });\n    }\n\n    obterNegociacoes() {\n        /*\n        |----------------------------------------------------------------------\n        | Promise.all()\n        |----------------------------------------------------------------------\n        |\n        | Recebe um array de promises, o seu método then() retorna um array de\n        | respostas. O seu catch irá retornar o primeor erro que ocorrer.\n        | Promises podem são utilizadas para evitar a 'pyramid of doom',\n        | onde é formada uma piramide de callbacks que dependem um do outro.\n        |\n        */\n        return Promise.all([\n            this.buscarNegociacoesSemana(),\n            this.buscarNegociacoesSemanaAnterior(),\n            this.buscarNegociacoesSemanaRetrasada()\n        ])\n        .then(periodos => {\n            let negociacoes = periodos.reduce((arrayFlatten, periodo) => arrayFlatten.concat(periodo), [])\n            .map(negociacao =>\n                new Negociacao(new Date(negociacao.data), negociacao.quantidade, negociacao.valor));\n\n            return negociacoes;\n        })\n        .catch(erro => {\n            throw new Error(erro);\n        });\n    }\n\n    cadastra(negociacao) {\n        return ConnectionFactory.getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.adicionar(negociacao))\n            .catch(erro => {\n                throw new Error(erro);\n            });\n    }\n\n    apagarTodas() {\n        return ConnectionFactory.getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.apagarTodos())\n            .catch(erro => {\n                throw new Error(erro);\n            });\n    }\n\n    listar() {\n        return ConnectionFactory.getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.listarTodos())\n            .catch(erro => {\n                throw new Error(erro);\n            });\n    }\n\n    importar(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                /*\n                |--------------------------------------------------------------\n                | array.filter((item) => { return true or false})\n                |--------------------------------------------------------------\n                |\n                | filter() percorre o array verificando se o item deve ou não fazer\n                | parte do novo array que será retornado no final da verificação.\n                |\n                */\n                negociacoes.filter(negociacao =>\n                    /*\n                    |----------------------------------------------------------\n                    | array.some((item) => {})\n                    |----------------------------------------------------------\n                    |\n                    | Permite realizar uma verificação com cada item do array\n                    | se o resultado for true a verificação para e true é retornado,\n                    | caso contrário false.\n                    |\n                    */\n                    !listaAtual.some(negociacaoExistente =>\n                        negociacaoExistente.isEquals(negociacao))))\n            .catch(erro => {\n                throw new Error(erro);\n            })\n    }\n}\n"]}
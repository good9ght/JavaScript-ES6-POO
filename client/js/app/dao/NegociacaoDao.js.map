{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","constructor","conexao","_conexao","_banco","adicionar","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","event","onerror","console","log","target","error","name","listarTodos","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","apagarTodos","clear","e"],"mappings":"AAAA,MAAMA,aAAN,CAAoB;;AAEhBC,gBAAYC,OAAZ,EAAqB;AACjB,aAAKC,QAAL,GAAgBD,OAAhB;AACA,aAAKE,MAAL,GAAgB,aAAhB;AACH;;AAEDC,cAAUC,UAAV,EAAsB;AAClB,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,gBAAIC,UAAU,KAAKP,QAAL,CACbQ,WADa,CACD,CAAC,KAAKP,MAAN,CADC,EACc,WADd,EAEbQ,WAFa,CAED,KAAKR,MAFJ,EAGbS,GAHa,CAGTP,UAHS,CAAd;;AAKA;AACA;;;AAGAI,oBAAQI,SAAR,GAAoBC,SAAS;AACzBP,wBAAQ,oCAAR;AACH,aAFD;AAGAE,oBAAQM,OAAR,GAAkBD,SAAS;AACvBE,wBAAQC,GAAR,CAAYH,MAAMI,MAAN,CAAaC,KAAb,CAAmBC,IAA/B;AACAZ,uBAAO,0CAAP;AACH,aAHD;AAIH,SAjBM,CAAP;AAkBH;;AAEDa,kBAAc;AACV,eAAO,IAAIf,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,gBAAIc,SAAS,KAAKpB,QAAL,CAAcQ,WAAd,CAA0B,CAAC,KAAKP,MAAN,CAA1B,EAAyC,WAAzC,EACZQ,WADY,CACA,KAAKR,MADL,EACaoB,UADb,EAAb;AAEA,gBAAIC,cAAc,EAAlB;;AAEAF,mBAAOT,SAAP,GAAmBC,SAAS;AACxB,oBAAIW,QAAQX,MAAMI,MAAN,CAAaQ,MAAzB;;AAEA,oBAAGD,KAAH,EAAU;AACN,wBAAIE,OAAOF,MAAMG,KAAjB;AACAJ,gCAAYK,IAAZ,CACI,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CADJ;AAEAR,0BAAMS,QAAN;AACH,iBALD,MAMK;AACJ;AACA;AACG3B,4BAAQiB,WAAR;AACH;AACJ,aAdD;;AAgBAF,mBAAOP,OAAP,GAAiBD,SAAS;AACtBE,wBAAQC,GAAR,CAAYH,MAAMK,KAAN,CAAYC,IAAxB;AACAZ,uBAAO,wCAAP;AACH,aAHD;AAIH,SAzBM,CAAP;AA0BH;;AAED2B,kBAAc;AACV,eAAO,IAAI7B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,gBAAIC,UAAU,KAAKP,QAAL,CAAcQ,WAAd,CAA0B,CAAC,KAAKP,MAAN,CAA1B,EAAyC,WAAzC,EACbQ,WADa,CACD,KAAKR,MADJ,EACYiC,KADZ,EAAd;;AAGA3B,oBAAQI,SAAR,GAAoBC,SAAS;AACzBP,wBAAQ,oCAAR;AACH,aAFD;;AAIAE,oBAAQM,OAAR,GAAkBsB,KAAK;AACnBrB,wBAAQC,GAAR,CAAYoB,EAAEnB,MAAF,CAASC,KAArB;AACAX,uBAAO,yCAAP;AACH,aAHD;AAIH,SAZM,CAAP;AAaH;AAvEe","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao {\n\n    constructor(conexao) {\n        this._conexao = conexao;\n        this._banco   = \"negociacoes\";\n    }\n\n    adicionar(negociacao) {\n        return new Promise((resolve, reject) => {\n            let request = this._conexao\n            .transaction([this._banco], \"readwrite\")\n            .objectStore(this._banco)\n            .add(negociacao);\n\n            // #### VAI CANCELAR A TRANSAÇÃO. O evento onerror será chamado.\n            // transaction.abort();\n\n\n            request.onsuccess = event => {\n                resolve(\"Negociação adicionada com sucesso.\");\n            }\n            request.onerror = event => {\n                console.log(event.target.error.name);\n                reject(\"Não foi possível cadastrar a negociação.\");\n            }\n        });\n    }\n\n    listarTodos() {\n        return new Promise((resolve, reject) => {\n            let cursor = this._conexao.transaction([this._banco], \"readwrite\")\n            .objectStore(this._banco).openCursor();\n            let negociacoes = [];\n\n            cursor.onsuccess = event => {\n                let atual = event.target.result;\n\n                if(atual) {\n                    let dado = atual.value;\n                    negociacoes.push(\n                        new Negociacao(dado._data, dado._quantidade, dado._valor));\n                    atual.continue();\n                }\n                else {\n                 // quando não há mais objects em nossa store.\n                 // Isso significa que já terminados de popular negociacoes\n                    resolve(negociacoes);\n                }\n            }\n\n            cursor.onerror = event => {\n                console.log(event.error.name);\n                reject(\"Não foi possível obter as negociações.\")\n            }\n        });\n    }\n\n    apagarTodos() {\n        return new Promise((resolve, reject) => {\n            let request = this._conexao.transaction([this._banco], \"readwrite\")\n            .objectStore(this._banco).clear();\n\n            request.onsuccess = event => {\n                resolve(\"Negociações removidas com sucesso.\");\n            }\n\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject('Não foi possível remover as negociações');\n            }\n        });\n    }\n}\n"]}
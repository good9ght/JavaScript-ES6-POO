{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","conexao","_conexao","_banco","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","event","target","error","name","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","clear","e"],"mappings":";;;;;;;;;;;;;;;AAASA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEIC,a;AAET,uCAAYC,OAAZ,EAAqB;AAAA;;AACjB,yBAAKC,QAAL,GAAgBD,OAAhB;AACA,yBAAKE,MAAL,GAAgB,aAAhB;AACH;;;;8CAESC,U,EAAY;AAAA;;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,MAAKN,QAAL,CACbO,WADa,CACD,CAAC,MAAKN,MAAN,CADC,EACc,WADd,EAEbO,WAFa,CAED,MAAKP,MAFJ,EAGbQ,GAHa,CAGTP,UAHS,CAAd;;AAKA;AACA;;;AAGAI,oCAAQI,SAAR,GAAoB,iBAAS;AACzBN,wCAAQ,oCAAR;AACH,6BAFD;AAGAE,oCAAQK,OAAR,GAAkB,iBAAS;AACvBC,wCAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAb,CAAmBC,IAA/B;AACAZ,uCAAO,0CAAP;AACH,6BAHD;AAIH,yBAjBM,CAAP;AAkBH;;;kDAEa;AAAA;;AACV,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIa,SAAS,OAAKlB,QAAL,CAAcO,WAAd,CAA0B,CAAC,OAAKN,MAAN,CAA1B,EAAyC,WAAzC,EACZO,WADY,CACA,OAAKP,MADL,EACakB,UADb,EAAb;AAEA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOR,SAAP,GAAmB,iBAAS;AACxB,oCAAIW,QAAQP,MAAMC,MAAN,CAAaO,MAAzB;;AAEA,oCAAGD,KAAH,EAAU;AACN,wCAAIE,OAAOF,MAAMG,KAAjB;AACAJ,gDAAYK,IAAZ,CACI,IAAI5B,UAAJ,CAAe0B,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CADJ;AAEAP,0CAAMQ,QAAN;AACH,iCALD,MAMK;AACJ;AACA;AACGzB,4CAAQgB,WAAR;AACH;AACJ,6BAdD;;AAgBAF,mCAAOP,OAAP,GAAiB,iBAAS;AACtBC,wCAAQC,GAAR,CAAYC,MAAME,KAAN,CAAYC,IAAxB;AACAZ,uCAAO,wCAAP;AACH,6BAHD;AAIH,yBAzBM,CAAP;AA0BH;;;kDAEa;AAAA;;AACV,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,OAAKN,QAAL,CAAcO,WAAd,CAA0B,CAAC,OAAKN,MAAN,CAA1B,EAAyC,WAAzC,EACbO,WADa,CACD,OAAKP,MADJ,EACY6B,KADZ,EAAd;;AAGAxB,oCAAQI,SAAR,GAAoB,iBAAS;AACzBN,wCAAQ,oCAAR;AACH,6BAFD;;AAIAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYkB,EAAEhB,MAAF,CAASC,KAArB;AACAX,uCAAO,yCAAP;AACH,6BAHD;AAIH,yBAZM,CAAP;AAaH","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from '../models/Negociacao';\n\nexport class NegociacaoDao {\n\n    constructor(conexao) {\n        this._conexao = conexao;\n        this._banco   = \"negociacoes\";\n    }\n\n    adicionar(negociacao) {\n        return new Promise((resolve, reject) => {\n            let request = this._conexao\n            .transaction([this._banco], \"readwrite\")\n            .objectStore(this._banco)\n            .add(negociacao);\n\n            // #### VAI CANCELAR A TRANSAÇÃO. O evento onerror será chamado.\n            // transaction.abort();\n\n\n            request.onsuccess = event => {\n                resolve(\"Negociação adicionada com sucesso.\");\n            }\n            request.onerror = event => {\n                console.log(event.target.error.name);\n                reject(\"Não foi possível cadastrar a negociação.\");\n            }\n        });\n    }\n\n    listarTodos() {\n        return new Promise((resolve, reject) => {\n            let cursor = this._conexao.transaction([this._banco], \"readwrite\")\n            .objectStore(this._banco).openCursor();\n            let negociacoes = [];\n\n            cursor.onsuccess = event => {\n                let atual = event.target.result;\n\n                if(atual) {\n                    let dado = atual.value;\n                    negociacoes.push(\n                        new Negociacao(dado._data, dado._quantidade, dado._valor));\n                    atual.continue();\n                }\n                else {\n                 // quando não há mais objects em nossa store.\n                 // Isso significa que já terminados de popular negociacoes\n                    resolve(negociacoes);\n                }\n            }\n\n            cursor.onerror = event => {\n                console.log(event.error.name);\n                reject(\"Não foi possível obter as negociações.\")\n            }\n        });\n    }\n\n    apagarTodos() {\n        return new Promise((resolve, reject) => {\n            let request = this._conexao.transaction([this._banco], \"readwrite\")\n            .objectStore(this._banco).clear();\n\n            request.onsuccess = event => {\n                resolve(\"Negociações removidas com sucesso.\");\n            }\n\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject('Não foi possível remover as negociações');\n            }\n        });\n    }\n}\n"]}
{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["dbName","stores","version","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","event","_createConnection","target","result","onsuccess","bind","onerror","console","log","e","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,kB,GAAS,Y;AACTC,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AAEZC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;;;oDAEsB;AAAA;;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,MAAtB,EAA8BE,OAA9B,CAAlB;;AAEAQ,wCAAYI,eAAZ,GAA8B,UAACC,KAAD,EAAW;AACrC,sCAAKC,iBAAL,CAAuBD,MAAME,MAAN,CAAaC,MAApC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,UAACJ,KAAD,EAAW;AAC/B,oCAAG,CAACZ,UAAJ,EAAgB;AACZA,iDAAaY,MAAME,MAAN,CAAaC,MAA1B;AACA;;;;;;;;AAQAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACH;AACDA,2CAAWC,KAAX,GAAmB,YAAM;AACrB,0CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,iCAFD;AAGAE,wCAAQL,UAAR;AACH,6BAjBD;;AAmBAO,wCAAYW,OAAZ,GAAsB,UAACN,KAAD,EAAW;AAC7BO,wCAAQC,GAAR,CAAYC,EAAEP,MAAF,CAASQ,KAArB;AACAhB,uCAAOe,EAAEP,MAAF,CAASQ,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBA/BM,CAAP;AAgCH;;;sDAEwBvB,U,EAAY;AACjCF,+BAAO0B,OAAP,CAAe,UAACC,KAAD,EAAW;AACtB,gCAAGzB,WAAW0B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EAAgDzB,WAAW4B,iBAAX,CAA6BH,KAA7B;AAChDzB,uCAAW6B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,yBAHD;AAIH;;;oDAEsB9B,U,EAAY;AAC/BC;AACAD,qCAAa,IAAb;AACH","file":"ConnectionFactory.js","sourcesContent":["\nconst dbName = 'aluraframe';\nconst stores = ['negociacoes'];\nconst version = 2;\n\nvar connection = null;\nvar close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error(\"Está classe não pode ser instânciada.\");\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = (event) => {\n                this._createConnection(event.target.result);\n            }\n\n            openRequest.onsuccess = (event) => {\n                if(!connection) {\n                    connection = event.target.result;\n                    /*\n                    |----------------------------------------------------------------------\n                    | Monkey Patch\n                    |----------------------------------------------------------------------\n                    |\n                    | Sobrepondo a função close do objeto connection.\n                    |\n                    */\n                    close = connection.close.bind(connection);\n                }\n                connection.close = () => {\n                    throw new Error(\"Você não pode fechar diretamente a conexão.\");\n                }\n                resolve(connection);\n            }\n\n            openRequest.onerror = (event) => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            }\n        });\n    }\n\n    static _createConnection(connection) {\n        stores.forEach((store) => {\n            if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n            connection.createObjectStore(store, { autoIncrement: true });\n        });\n    }\n\n    static closeConnection(connection) {\n        close();\n        connection = null;\n    }\n}\n"]}
{"version":3,"sources":["../../app-es6/services/ProxyFactory.js"],"names":["ProxyFactory","create","objeto","acao","props","Proxy","get","target","prop","receiver","includes","_ehFuncao","retorno","Reflect","apply","arguments","set","value","Function"],"mappings":";AACA,MAAMA,YAAN,CAAmB;;AAEf,WAAOC,MAAP,CAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAoC;AAChC;;;;;;;;;;AAUA,eAAO,IAAIC,KAAJ,CAAUH,MAAV,EAAkB;AACrB;;;;;;;;;;;;;;AAcAI,gBAAIC,MAAJ,EAAYC,IAAZ,EAAkBC,QAAlB,EAA4B;AACxB,oBAAGL,MAAMM,QAAN,CAAeF,IAAf,KAAwBR,aAAaW,SAAb,CAAuBJ,OAAOC,IAAP,CAAvB,CAA3B,EAAiE;AAC7D,2BAAO,YAAW;AACd;;;;;;;;;;;;;AAaA,4BAAII,UAAUC,QAAQC,KAAR,CAAcP,OAAOC,IAAP,CAAd,EAA4BD,MAA5B,EAAoCQ,SAApC,CAAd;AACAZ,6BAAKI,MAAL;AACA,+BAAOK,OAAP;AACH,qBAjBD;AAkBH;AACD,uBAAOC,QAAQP,GAAR,CAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,QAA1B,CAAP;AACH,aArCoB;AAsCrBO,gBAAIT,MAAJ,EAAYC,IAAZ,EAAkBS,KAAlB,EAAyBR,QAAzB,EAAmC;AAC/B,oBAAIG,UAAWC,QAAQG,GAAR,CAAYT,MAAZ,EAAoBC,IAApB,EAA0BS,KAA1B,EAAiCR,QAAjC,CAAf;AACA,oBAAGL,MAAMM,QAAN,CAAeF,IAAf,CAAH,EAAyBL,KAAKI,MAAL;AACzB,uBAAOK,OAAP;AACH;AA1CoB,SAAlB,CAAP;AA4CH;;AAED,WAAOD,SAAP,CAAiBH,IAAjB,EAAuB;AACnB,eAAO,OAAOA,IAAP,IAAgB,OAAOU,QAA9B;AACH;AA7Dc","file":"ProxyFactory.js","sourcesContent":["\nclass ProxyFactory {\n\n    static create(objeto, acao, props ) {\n        /*\n        |----------------------------------------------------------------------\n        | Proxy(target, handlers)\n        |----------------------------------------------------------------------\n        |\n        | Proxy é como uma camada adicionada ao objeto(target). Os handlers\n        | ficam entre a camada e o objeto. Quando métodos ou atríbutos do proxy\n        | forem chamados os handlers executam ações definidas (traps);\n        |\n        */\n        return new Proxy(objeto, {\n            /*\n            |----------------------------------------------------------------------\n            | get(target, prop, receiver) e set\n            |----------------------------------------------------------------------\n            |\n            | target: o objeto clonado\n            | prop: nome da propriedade(atributo ou função do objeto)\n            | receiver: proxy do objeto\n            |\n            | Métodos são variáveis dentro de objetos que armazenam funções, ou seja,\n            | o get declarado diretamente como função é o mesmo que 'get: function(){}'\n            | O set possui value, o novo valor da propriedade.\n            |\n            */\n            get(target, prop, receiver) {\n                if(props.includes(prop) && ProxyFactory._ehFuncao(target[prop])) {\n                    return function() {\n                        /*\n                        |----------------------------------------------------------------------\n                        | Reflect.apply(função, contexto, ['parametros'])\n                        |----------------------------------------------------------------------\n                        |\n                        | Este método executa uma função em um determinado\n                        | contexto com os parâmetros especificados.\n                        | Caso a função possua um retorno é necessário retorná-lo,\n                        | por isso a variável retorno foi criada.\n                        | Após a execução do Reflect.apply o seu retorno é armazenado\n                        | e após a execução de acao() ele será retornado.\n                        |\n                        */\n                        let retorno = Reflect.apply(target[prop], target, arguments);\n                        acao(target);\n                        return retorno;\n                    }\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, value, receiver) {\n                let retorno =  Reflect.set(target, prop, value, receiver);\n                if(props.includes(prop)) acao(target);\n                return retorno;\n            }\n        });\n    }\n\n    static _ehFuncao(prop) {\n        return typeof(prop) == typeof(Function);\n    }\n}\n"]}